// Generated by gencpp from file hellocm_msgs/Ext2CM.msg
// DO NOT EDIT!


#ifndef HELLOCM_MSGS_MESSAGE_EXT2CM_H
#define HELLOCM_MSGS_MESSAGE_EXT2CM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hellocm_msgs
{
template <class ContainerAllocator>
struct Ext2CM_
{
  typedef Ext2CM_<ContainerAllocator> Type;

  Ext2CM_()
    : header()
    , time()
    , cycleno(0)
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)
    , gear(0)
    , GolableEnable(false)  {
    }
  Ext2CM_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time()
    , cycleno(0)
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)
    , gear(0)
    , GolableEnable(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _time_type;
  _time_type time;

   typedef int64_t _cycleno_type;
  _cycleno_type cycleno;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _brake_type;
  _brake_type brake;

   typedef double _steering_type;
  _steering_type steering;

   typedef int64_t _gear_type;
  _gear_type gear;

   typedef uint8_t _GolableEnable_type;
  _GolableEnable_type GolableEnable;





  typedef boost::shared_ptr< ::hellocm_msgs::Ext2CM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hellocm_msgs::Ext2CM_<ContainerAllocator> const> ConstPtr;

}; // struct Ext2CM_

typedef ::hellocm_msgs::Ext2CM_<std::allocator<void> > Ext2CM;

typedef boost::shared_ptr< ::hellocm_msgs::Ext2CM > Ext2CMPtr;
typedef boost::shared_ptr< ::hellocm_msgs::Ext2CM const> Ext2CMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hellocm_msgs::Ext2CM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hellocm_msgs::Ext2CM_<ContainerAllocator1> & lhs, const ::hellocm_msgs::Ext2CM_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.cycleno == rhs.cycleno &&
    lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.steering == rhs.steering &&
    lhs.gear == rhs.gear &&
    lhs.GolableEnable == rhs.GolableEnable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hellocm_msgs::Ext2CM_<ContainerAllocator1> & lhs, const ::hellocm_msgs::Ext2CM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hellocm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hellocm_msgs::Ext2CM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hellocm_msgs::Ext2CM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hellocm_msgs::Ext2CM_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce178e234de1fb8a500aea5e12e7372f";
  }

  static const char* value(const ::hellocm_msgs::Ext2CM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce178e234de1fb8aULL;
  static const uint64_t static_value2 = 0x500aea5e12e7372fULL;
};

template<class ContainerAllocator>
struct DataType< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hellocm_msgs/Ext2CM";
  }

  static const char* value(const ::hellocm_msgs::Ext2CM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Message from external ROS Node to CarMaker ROS Node\n"
"#\n"
"\n"
"# General\n"
"Header  header                                 # General ROS Header (optional)\n"
"time    time                                   # ROS time when message was sent (optional)\n"
"int64   cycleno                                # Cycle number since simulation start (optional)\n"
"float64 throttle\n"
"float64 brake\n"
"float64 steering\n"
"int64 gear\n"
"bool GolableEnable\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hellocm_msgs::Ext2CM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.cycleno);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.steering);
      stream.next(m.gear);
      stream.next(m.GolableEnable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ext2CM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hellocm_msgs::Ext2CM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hellocm_msgs::Ext2CM_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "cycleno: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cycleno);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
    s << indent << "gear: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gear);
    s << indent << "GolableEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GolableEnable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLOCM_MSGS_MESSAGE_EXT2CM_H
